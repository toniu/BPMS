/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
// OBJECTIVE 6: An effective method for data validation 
package badmintonSystem;

// required imports
import com.mysql.jdbc.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;

/**
 *
 * @author Neka
 */
public class createAccount extends javax.swing.JFrame {
    // instantiation of a new message dialog
    msgDialog msgDlg = new msgDialog(new javax.swing.JFrame(),true);
    // get returned connection from
    Connection con = SQLConnection.getConnection(); 

    /**
     * Creates new form badmintonLogin
     */
    public createAccount() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        usernameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        firstNameField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        imgBadminton = new javax.swing.JLabel();
        btnCancel = new javax.swing.JToggleButton();
        btnExit = new javax.swing.JToggleButton();
        btnLogin = new javax.swing.JToggleButton();
        confirmPasswordField = new javax.swing.JPasswordField();
        confirmPassLabel = new javax.swing.JLabel();
        dcbirthDate = new javax.swing.JLabel();
        lastNameLabel = new javax.swing.JLabel();
        dcbirthDate2 = new javax.swing.JLabel();
        lastNameField = new javax.swing.JTextField();
        cityField = new javax.swing.JTextField();
        genderLabel = new javax.swing.JLabel();
        genderCombo = new javax.swing.JComboBox<>();
        dcCombo = new com.toedter.calendar.JDateChooser();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnSignUp = new javax.swing.JButton();
        showPassCB = new javax.swing.JCheckBox();
        addressLine1Label = new javax.swing.JLabel();
        addressLine2Label = new javax.swing.JLabel();
        cityLabel = new javax.swing.JLabel();
        postcodeLabel = new javax.swing.JLabel();
        teleNoLabel = new javax.swing.JLabel();
        addressL1Field = new javax.swing.JTextField();
        addressL2Field = new javax.swing.JTextField();
        usernameField = new javax.swing.JTextField();
        postcodeField = new javax.swing.JTextField();
        teleNoField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ClubBADMINTON");
        setBounds(new java.awt.Rectangle(0, 23, 0, 0));
        setName("createAccount"); // NOI18N
        setPreferredSize(new java.awt.Dimension(895, 710));
        setResizable(false);
        setSize(new java.awt.Dimension(0, 0));
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(0, 51, 102));

        usernameLabel.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        usernameLabel.setForeground(new java.awt.Color(255, 255, 255));
        usernameLabel.setText("CREATE USERNAME:*");

        passwordLabel.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        passwordLabel.setForeground(new java.awt.Color(255, 255, 255));
        passwordLabel.setText("CREATE PASSWORD:*");

        firstNameField.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        firstNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstNameFieldActionPerformed(evt);
            }
        });
        firstNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                firstNameFieldKeyTyped(evt);
            }
        });

        passwordField.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N

        imgBadminton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/systemIcons/badmintonLogoTransparent.png"))); // NOI18N

        btnCancel.setBackground(new java.awt.Color(255, 0, 51));
        btnCancel.setFont(new java.awt.Font("Adobe Gothic Std", 0, 13)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(255, 255, 255));
        btnCancel.setText("CANCEL");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnExit.setBackground(new java.awt.Color(255, 0, 51));
        btnExit.setFont(new java.awt.Font("Adobe Gothic Std", 0, 13)); // NOI18N
        btnExit.setForeground(new java.awt.Color(255, 255, 255));
        btnExit.setText("EXIT");
        btnExit.setAlignmentY(0.0F);
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnLogin.setBackground(new java.awt.Color(255, 51, 0));
        btnLogin.setFont(new java.awt.Font("Adobe Gothic Std", 0, 13)); // NOI18N
        btnLogin.setForeground(new java.awt.Color(255, 255, 255));
        btnLogin.setText("GO TO LOGIN");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        confirmPasswordField.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N

        confirmPassLabel.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        confirmPassLabel.setForeground(new java.awt.Color(255, 255, 255));
        confirmPassLabel.setText("CONFIRM PASSWORD:*");

        dcbirthDate.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        dcbirthDate.setForeground(new java.awt.Color(255, 255, 255));
        dcbirthDate.setText("DATE OF BIRTH:*");

        lastNameLabel.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lastNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        lastNameLabel.setText("LAST NAME:*");

        dcbirthDate2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        dcbirthDate2.setForeground(new java.awt.Color(255, 255, 255));
        dcbirthDate2.setText("FIRST NAME:*");

        lastNameField.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        lastNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                lastNameFieldKeyTyped(evt);
            }
        });

        cityField.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N

        genderLabel.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        genderLabel.setForeground(new java.awt.Color(255, 255, 255));
        genderLabel.setText("GENDER:*");

        genderCombo.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        genderCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", "Other" }));

        dcCombo.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N

        jPanel2.setBackground(new java.awt.Color(255, 51, 0));

        jLabel2.setFont(new java.awt.Font("Adobe Gothic Std", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("CLUB BADMINTON REGISTER");

        jLabel1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("* - required");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(122, 122, 122)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1)))
        );

        btnSignUp.setBackground(new java.awt.Color(0, 153, 102));
        btnSignUp.setFont(new java.awt.Font("Adobe Gothic Std", 0, 13)); // NOI18N
        btnSignUp.setForeground(new java.awt.Color(255, 255, 255));
        btnSignUp.setText("SIGN UP");
        btnSignUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSignUpActionPerformed(evt);
            }
        });

        showPassCB.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        showPassCB.setForeground(new java.awt.Color(255, 255, 255));
        showPassCB.setText("SHOW PASSWORD");
        showPassCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPassCBActionPerformed(evt);
            }
        });

        addressLine1Label.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        addressLine1Label.setForeground(new java.awt.Color(255, 255, 255));
        addressLine1Label.setText("ADDRESS LINE 1:*");

        addressLine2Label.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        addressLine2Label.setForeground(new java.awt.Color(255, 255, 255));
        addressLine2Label.setText("ADDRESS LINE 2:");

        cityLabel.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        cityLabel.setForeground(new java.awt.Color(255, 255, 255));
        cityLabel.setText("CITY*:");

        postcodeLabel.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        postcodeLabel.setForeground(new java.awt.Color(255, 255, 255));
        postcodeLabel.setText("POSTCODE*:");

        teleNoLabel.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        teleNoLabel.setForeground(new java.awt.Color(255, 255, 255));
        teleNoLabel.setText("TELEPHONE NO*:");

        addressL1Field.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        addressL1Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                addressL1FieldKeyTyped(evt);
            }
        });

        addressL2Field.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        addressL2Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                addressL2FieldKeyTyped(evt);
            }
        });

        usernameField.setEditable(false);
        usernameField.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N

        postcodeField.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N

        teleNoField.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(usernameLabel)
                    .addComponent(dcbirthDate2)
                    .addComponent(passwordLabel)
                    .addComponent(dcbirthDate)
                    .addComponent(confirmPassLabel)
                    .addComponent(addressLine1Label)
                    .addComponent(addressLine2Label)
                    .addComponent(postcodeLabel)
                    .addComponent(cityLabel)
                    .addComponent(teleNoLabel)
                    .addComponent(lastNameLabel)
                    .addComponent(genderLabel)
                    .addComponent(showPassCB, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(confirmPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dcCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(genderCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(68, 68, 68)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnSignUp, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(53, 53, 53)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(imgBadminton, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(addressL1Field, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cityField, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(postcodeField, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(teleNoField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(addressL2Field, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(1027, 1027, 1027))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dcbirthDate2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(lastNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(usernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(passwordLabel))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(confirmPassLabel))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(confirmPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(showPassCB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dcCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dcbirthDate, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(genderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(genderCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnExit))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSignUp, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(imgBadminton)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(addressL1Field, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addressL2Field, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addressLine2Label, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(addressLine1Label, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cityField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(postcodeField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(postcodeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(teleNoField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(teleNoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(58, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 10, 890, 700);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //  list of validation methods (defensive programming to prevent crashes/errors on console log)
    
    // function to validate first name
   public boolean validateFirstName(String firstName)
   {
      boolean doesMatch = firstName.matches( "[A-Z][a-zA-Z]*" ); // regex expression which means letters only
       // set message if it doesn't match and return as false
      if (!doesMatch) {
         msgDlg.setMessage("Invalid first name: must have uppercase/lowercase letters only");
         msgDlg.setVisible(true); 
      } 
      return doesMatch;
   } 

   // function to validate last name
   public  boolean validateLastName(String lastName)
   {
      boolean doesMatch = lastName.matches( "[a-zA-z]+([ '-][a-zA-Z]+)*" ); // regex expression which allows letters, spaces and dashes
       // set message if it doesn't match and return as false
      if (!doesMatch) {
         msgDlg.setMessage("Invalid last name: must have uppercase/lowercase letters. Dashes, apostrophes and spaces are allowed too.");
         msgDlg.setVisible(true); 
      }
      return doesMatch;
   } 
   // function to validate user name
   // function to check that username follows specific criteria
    // [+] can contain a-z, A-Z
    // [+] can contain 0-9
    // [+] no spaces
    // [+] can include dashes, underscores
    // [+] length must be between 3-29 characters
   public boolean validateUsername(String username)
   {
       // regex used to suit the criteria
      String usernameRegex = "^[a-zA-Z0-9_-]*$";
      boolean validUserRequest = username.matches(usernameRegex); // regex expression
      int usernamelength = username.length();
       // length of the username must be 3-29 characters
      if (!(validUserRequest) && (usernamelength < 3 || usernamelength > 29)) {
         msgDlg.setMessage("Invalid user name: must be between 3-29 characters valid characters include a-z, A-Z, 0-9, dashes and underscores");
         msgDlg.setVisible(true); 
      }
      return validUserRequest;
   } 
   
    // function to check if username already exists
    public static boolean checkIfUserExists(String username)
    {
        PreparedStatement ps = null;
        ResultSet rs = null;
        boolean checkUser = false;
        
        // query to search for records in the table 'user' where the username is the parameter of this function
        String queryCheck = "SELECT * FROM `user` WHERE `username` =?";
        
        try {
            // get connection from SQLConnection class function and prepare statement with query
            ps = SQLConnection.getConnection().prepareStatement(queryCheck);
            ps.setString(1, username);
            
            rs = ps.executeQuery();
            
            // if a result is found, a match has been found therefore return as true
            if(rs.next())
            {
                checkUser = true;
            }
        // exception handling of SQL errors
        } catch (SQLException ex) {
            Logger.getLogger(createAccount.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            // call procedure to close the connection
            SQLConnection.closeConnection(SQLConnection.getConnection(), rs, ps, null);
        }
        return checkUser;
    }
    
    // function to validate password
    public boolean validatePass(String password, String confirmPassword) {
        // INVALID if password doesn't equal confirm password
        if (!password.equals(confirmPassword)) {
            msgDlg.setMessage("Both password fields do not match. Re-type password");
            msgDlg.setVisible(true);
            return false;
        }
        else {
            // INVALID if password length is less than 6 or password length more than 30
            if (password.length() > 6 || password.length() < 30) {
                // call procedure to check the password against its criteria
                if (checkPass(password)) {
                    return true;
                }
                else {
                    
                    msgDlg.setMessage("Password must have at least 1 captial letter, one number, no spaces and one lowercase letter");
                    msgDlg.setVisible(true);
                    return false;
                }
            }
            else {
                msgDlg.setMessage("Password length must be between 7-29 characters");
                msgDlg.setVisible(true);
                return false;
            }          
        }
    }
    
    // function to check that password follows specific criteria
    // [+] at least one captial letter
    // [+] at least one number
    // [+] no spaces
    // [+] at least one lowercase letter
    // [+] length must be between 7-29 characters
    private boolean checkPass(String password) {
        boolean hasNum = false; boolean hasCapitals = false; boolean hasLower = false; boolean hasSpaces = false; char currentCharacter;
        for (int i = 0; i < password.length(); i++) {
            currentCharacter = password.charAt(i);
            // is the current character a digit? 
            if (Character.isDigit(currentCharacter)) {
                hasNum = true;
            }
            // criteria check: is the current character an uppercase? if so, password does have uppercase letters
            else if (Character.isUpperCase(currentCharacter)) {
                hasCapitals = true;
            }
            // criteria check: is the current character a lowercase? if so, password does have lowercase letters
            else if (Character.isLowerCase(currentCharacter)) {
                hasLower = true;
            }
            // criteria check: is the current character a whitespace? if so, password does have whitespace letters
            else if (Character.isWhitespace(currentCharacter)) {
                hasSpaces = true;
            }
            // return true if password has at least one number, capital letter, lowercase letter, and NO spaces.
            if (hasNum && hasCapitals && hasLower && (hasSpaces == false)) {
                return true;
            }           
        }
        return false;
    }
    
    // function to check if any of the inputs are blank
    private boolean checkIfInputsBlank(String firstNameInput, String lastNameInput, String usernameInput, String passwordInput, Date bDateInput, String addressL1Input, String cityInput, String postcodeInput, String teleNoInput) {
        // return false if any of the textfields are blank
        // trim the strings to ensure there is no whitespace before checking if it matches with "".
        boolean isBlank = false;
        if (firstNameInput.trim().equals("") || lastNameInput.trim().equals("") || usernameInput.trim().equals("") || passwordInput.trim().equals("") || (bDateInput == null) || addressL1Input.trim().equals("") || cityInput.trim().equals("") || postcodeInput.trim().equals("") || teleNoInput.trim().equals("")) {
            isBlank = true;
        }
        return isBlank;
    }
    
    // procedure to update audit log 
    public void updateAuditLog(String firstName, String lastName, String username) {
        // set timestamp of SQL QUERY
        Date date = new Date();
        long time = date.getTime();
        Timestamp updateTimestamp = new Timestamp(time);
        
        // indicate when a new user has been added into the system
        String change = ("Added user: "+ firstName + " " + lastName + " with username, " + username);

        Statement st = null;
        try {
            st = SQLConnection.getConnection().createStatement();
            if ((st.executeUpdate("INSERT INTO `change`(`change`, `timeOfChange`, `userWhoChanged`, `user_id`) VALUES ('"+change+"','"+updateTimestamp+"','SYSTEM','" + 0 + "')")) == 1)
            {
                System.out.println("AUDIT LOG UPDATED");    
            } else {
                System.out.println("Failed to update into audit log.");
            }  
        // exception handling of SQL errors
        } catch (SQLException ex) {
            ex.printStackTrace();
        } finally {
            // call procedure to close the connection
            SQLConnection.closeConnection(SQLConnection.getConnection(), null, null, st);
        }
    }
    
    // button actions
    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // closes this form and opens the login form
        badmintonLogin loginForm = new badmintonLogin();
        loginForm.setVisible(true);
        loginForm.pack();
        loginForm.setLocationRelativeTo(null);
        loginForm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_btnLoginActionPerformed

    
    
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // closes this form and opens the login form
        badmintonLogin loginForm = new badmintonLogin();
        loginForm.setVisible(true);
        loginForm.pack();
        loginForm.setLocationRelativeTo(null);
        loginForm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // end any running session and exit the system
        SessionManager.endCurrentSession();
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void firstNameFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_firstNameFieldKeyTyped
        
        String currentfirstName = (firstNameField.getText()).trim();
        String currentLastName = (lastNameField.getText()).trim();
        String formUsername = null;
        // randomise the numbers of the auto-generated username
        Random RND = new Random();
        int usernameNumbers = RND.nextInt(998) + 1;
        String userNumFormat = String.format("%03d",usernameNumbers);
        
        // check if theres at least 1 character in firstName and lastName
        if (currentfirstName.length() > 0) {
            currentLastName.replaceAll("[\\-\\+\\.\\':,]",""); // regex expression to remove special characters
            
            // convert to lowercase and trim string of formed username, also adding randomly generated numbers to username
            formUsername = "user_" + ((currentfirstName.charAt(0) + currentLastName).toLowerCase() + userNumFormat).trim();

            usernameField.setText(formUsername.trim());
        }
    }//GEN-LAST:event_firstNameFieldKeyTyped

    private void lastNameFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lastNameFieldKeyTyped
        String currentFirstName = firstNameField.getText();
        String currentLastName = lastNameField.getText();
        String formUsername = null;
        Random RND = new Random();
        int usernameNumbers = RND.nextInt(998) + 1;
        String userNumFormat = String.format("%03d",usernameNumbers);
        
        // check if theres at least 1 character in firstName and lastName
        if (currentFirstName.length() >= 0) {
            currentLastName.replaceAll("[\\-\\+\\.\\':,]",""); // regex expression to remove special characters

            // convert to lowercase and trim string of formed username, also adding randomly generated numbers to username
            formUsername = "user_" + ((currentFirstName.charAt(0) + currentLastName).toLowerCase() + userNumFormat).trim();

            usernameField.setText(formUsername.replaceAll("\\s+","")); // remove all spaces
        }
    }//GEN-LAST:event_lastNameFieldKeyTyped
    
    // execute the SQL query
    public void executeSQLQuery(String query, String firstNameInput, String lastNameInput, String usernameInput) {
        Statement st = null;
        try {
            st = SQLConnection.getConnection().createStatement();
            if ((st.executeUpdate(query)) == 1)
            {
                // check results
                updateAuditLog(firstNameInput, lastNameInput, usernameInput);
                msgDlg.setMessage("New user: " + usernameInput + " added to system, with role set as USER");
                 msgDlg.setVisible(true);
                System.out.println("Added to user table");           
            } else {
                msgDlg.setMessage("Data request failed");
                msgDlg.setVisible(true);
            }           
        } catch (SQLException ex) {
            ex.printStackTrace();
        } finally {
            // call procedure to close the connection
            SQLConnection.closeConnection(SQLConnection.getConnection(), null, null, st);
        }
        
    }
    


    private void firstNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstNameFieldActionPerformed

    private void btnSignUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSignUpActionPerformed
        String firstNameInput = firstNameField.getText();
        String lastNameInput = lastNameField.getText();
        String usernameInput = usernameField.getText();
        String passwordInput = String.valueOf(passwordField.getPassword());
        String confirmPassInput = String.valueOf(confirmPasswordField.getPassword());
        String genderInput = (String) genderCombo.getSelectedItem();
        Date bDateInput = dcCombo.getDate();
        String addressL1Input = addressL1Field.getText();
        String addressL2Input = addressL2Field.getText();
        String cityInput = cityField.getText();
        String postcodeInput = postcodeField.getText();
        String teleNoInput = teleNoField.getText();
        String birthDate = null;
        
        // display message dialog if the inputs are blank as this is INVALID
        boolean isBlank = checkIfInputsBlank(firstNameInput, lastNameInput, usernameInput, passwordInput, bDateInput, addressL1Input, cityInput, postcodeInput, teleNoInput);
        if (isBlank) {
          msgDlg.setMessage("Please input the blank required (*) fields");
          msgDlg.setVisible(true);  
        }
        else if (checkIfUserExists(usernameInput)) {
            msgDlg.setMessage("This username already exists");
            msgDlg.setVisible(true);
        }
        else {

            boolean validatedFirstName = validateFirstName(firstNameInput);
            boolean validatedLastName = validateLastName(lastNameInput);
            boolean validatedUsername = validateUsername(usernameInput);
            boolean validatedPass = validatePass(passwordInput,confirmPassInput); // call sub-routine

            // use a simple date format to convert the date to string
            SimpleDateFormat dateformat = new SimpleDateFormat("dd-MM-yyyy");
            birthDate = dateformat.format(dcCombo.getDate());
            
            System.out.println("validated first Name: " + validatedFirstName);
            System.out.println("validated last Name: " + validatedLastName);
            System.out.println("validated username: " + validatedUsername);
            System.out.println("validated password: " + validatedPass);
            
            // only allow the query to execute if the first name, last name, username and password are VALID
            if (validatedFirstName && validatedLastName && validatedUsername && validatedPass) {
                
                // query to insert a new record of a NEW USER into the system
                System.out.println("creating query to add NEW user...");                       
                String query = "INSERT into `user`(`username`, `password`,`firstName`, `lastName`, `gender`, `dateOfBirth`, `telephoneNo`, `addressLine1`, `addressLine2`, `city`, `postalCode`) VALUES ('"+usernameInput+"','"+confirmPassInput+"','"+firstNameInput+"','"+lastNameInput+"','"+genderInput+"','"+birthDate+"','"+teleNoInput+"','"+addressL1Input+"','"+addressL2Input+"','"+cityInput+"','"+postcodeInput+"')";
                executeSQLQuery(query, firstNameInput, lastNameInput, usernameInput);
                updateAuditLog(firstNameInput, lastNameInput, usernameInput);
            }
        }
    }//GEN-LAST:event_btnSignUpActionPerformed

    private void showPassCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPassCBActionPerformed
        // show the password if the tick is selected
        if (showPassCB.isSelected()) {
            passwordField.setEchoChar((char)0);
            confirmPasswordField.setEchoChar((char)0);
        }
        else {
            // if not selected then hide the password as asteriks
            passwordField.setEchoChar('*');
            confirmPasswordField.setEchoChar('*');
        }
    }//GEN-LAST:event_showPassCBActionPerformed

    private void addressL1FieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addressL1FieldKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_addressL1FieldKeyTyped

    private void addressL2FieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addressL2FieldKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_addressL2FieldKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(createAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(createAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(createAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(createAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new createAccount().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addressL1Field;
    private javax.swing.JTextField addressL2Field;
    private javax.swing.JLabel addressLine1Label;
    private javax.swing.JLabel addressLine2Label;
    private javax.swing.JToggleButton btnCancel;
    private javax.swing.JToggleButton btnExit;
    private javax.swing.JToggleButton btnLogin;
    private javax.swing.JButton btnSignUp;
    private javax.swing.JTextField cityField;
    private javax.swing.JLabel cityLabel;
    private javax.swing.JLabel confirmPassLabel;
    private javax.swing.JPasswordField confirmPasswordField;
    private com.toedter.calendar.JDateChooser dcCombo;
    private javax.swing.JLabel dcbirthDate;
    private javax.swing.JLabel dcbirthDate2;
    private javax.swing.JTextField firstNameField;
    private javax.swing.JComboBox<String> genderCombo;
    private javax.swing.JLabel genderLabel;
    private javax.swing.JLabel imgBadminton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField lastNameField;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JTextField postcodeField;
    private javax.swing.JLabel postcodeLabel;
    private javax.swing.JCheckBox showPassCB;
    private javax.swing.JTextField teleNoField;
    private javax.swing.JLabel teleNoLabel;
    private javax.swing.JTextField usernameField;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables
}
